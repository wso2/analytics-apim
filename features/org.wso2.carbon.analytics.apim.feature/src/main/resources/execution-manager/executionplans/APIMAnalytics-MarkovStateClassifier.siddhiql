/* Enter a unique ExecutionPlan */
@Plan:name('APIMAnalytics-MarkovStateClassifier')

/* Enter a unique description for ExecutionPlan */
-- @Plan:description('ExecutionPlan')

/* define streams/tables and write queries here ... */




@Plan:trace('false')



@Import('org.wso2.apimgt.statistics.request:1.1.0')
define stream request (meta_clientType string, consumerKey string, context string, api_version string, api string, resourcePath string, resourceTemplate string, method string, version string, request int, requestTime long, userId string, tenantDomain string, hostName string, apiPublisher string, applicationName string, applicationId string, userAgent string, tier string, throttledOut bool, clientIp string);


@Export('org.wso2.analytics.apim.transitionStream:1.0.0')
define stream transitionStream (startState string, endState string, consumerKey string, userid string, requestTimestamp string);

@from(eventtable = 'analytics.table' , table.name = 'org_wso2_analytics_apim_REQUESTCOUNTTABLE', primary.keys='consumerKey', indices = 'consumerKey,count')
define table RequestCountPerConsumerKeyTable(consumerKey string, count int);


from request
select context,method,resourceTemplate, str:concat(method,' ',context,'_',resourceTemplate) as state, userId as userid, time:dateFormat(requestTime, 'yyyy-MM-dd HH:mm:ss') as requestTimestamp, consumerKey
insert into stateStream;


from request as r left outer join RequestCountPerConsumerKeyTable
on (r.consumerKey == RequestCountPerConsumerKeyTable.consumerKey)
select r.consumerKey , ifThenElse(count is null,1,count+1) as count
insert into requestCountPerConsumerKeyTableStream;

from requestCountPerConsumerKeyTableStream [count == 1]
select consumerKey,count
insert into RequestCountPerConsumerKeyTable;

from requestCountPerConsumerKeyTableStream [count != 1]
select consumerKey, count
update RequestCountPerConsumerKeyTable
on (consumerKey == RequestCountPerConsumerKeyTable.consumerKey);

from every a = stateStream -> b = stateStream[(userid == a.userid) and (consumerKey == a.consumerKey)] within 60 min
select a.state as startState, b.state as endState, a.consumerKey as consumerKey, b.userid, b.requestTimestamp 
insert into transitionStream;