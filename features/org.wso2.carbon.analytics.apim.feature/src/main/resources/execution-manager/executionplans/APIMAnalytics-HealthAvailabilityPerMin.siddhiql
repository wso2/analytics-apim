/* Enter a unique ExecutionPlan */


                                @Plan:name('APIMAnalytics-HealthAvailabilityPerMin')

/* Enter a unique description for ExecutionPlan */
-- @Plan:description('ExecutionPlan')

/* define streams/tables and write queries here ... */


@Plan:trace('false')

@Plan:statistics('false')

                               	@Import('org.wso2.apimgt.statistics.request:1.1.0')
								define stream requestStream (meta_clientType string, consumerKey string, context string, api_version string, api string, resourcePath string, resourceTemplate string, method string, version string, request int, requestTime long, userId string, tenantDomain string, hostName string, apiPublisher string, applicationName string, applicationId string, userAgent string, tier string, throttledOut bool, clientIp string);

								@Import('org.wso2.apimgt.statistics.response:1.1.0')
								define stream responseStream (meta_clientType string, consumerKey string, context string, api_version string, api string, resourcePath string, resourceTemplate string, method string, version string, response int, responseTime long, serviceTime long, backendTime long, username string, eventTime long, tenantDomain string, hostName string, apiPublisher string, applicationName string, applicationId string, cacheHit bool, responseSize long, protocol string, responseCode int);

								/* First define response/request count streams */

								/*@Export('org.wso2.analytics.apim.healthAvailabilityAlertStream:1.0.0')
								define stream minStatusTestStream (api_version string, status bool, reason string);*/

								@Export('org.wso2.analytics.apim.allApimAlertsStream:1.0.0')
								define stream allApimAlertStream (type string, msg string, alertTimestamp long);

								@Export('org.wso2.analytics.apim.responsePerMinPerApiStream:1.0.0')
								define stream responsePerMinPerApiStream (api_version string, responsesPerMinPerApi long);

								@Export('org.wso2.analytics.apim.requestPerMinPerApiStream:1.0.0')
								define stream requestPerMinPerApiStream (api_version string, requestsPerMinPerApi long);

								@Export('org.wso2.analytics.apim.apiHealthMonitorAlertStream:1.0.0')
								define stream apiHealthMonitorAlertStream (api_version string, apiPublisher string, msg string,alertTimestamp long);

								/*  -- Event tables -- */

								/* Lower percentiles */
                                @from(eventtable = 'analytics.table' , table.name = 'ORG_WSO2_ANALYTICS_APIM_REQUESTPERAPIPERCENTILE',  primary.keys = 'api_version')
                                define table requestPerApiPercentileTable (requestsPerMinPerApiLowerPercentile double, api_version string);

								@from(eventtable = 'analytics.table' , table.name = 'ORG_WSO2_ANALYTICS_APIM_RESPONSEPERAPIPERCENTILE',  primary.keys = 'api_version')
                                define table responsePerApiPercentileTable (api_version string, responsesPerMinPerApiLowerPercentile double);

								/* Then define response time streams */
								@from(eventtable = 'analytics.table' , table.name = 'ORG_WSO2_ANALYTICS_APIM_RESPONSETIMEPERAPIPERCENTILE',  primary.keys = 'api_version')
								define table responseTimePerApiPercentileTable (api_version string, responseTimePerApiUpperPercentile double);

                                @info(name = 'query1')
                                from requestStream
                                select api_version, apiPublisher 
                                insert into requestSummaryStream ;

								@info(name = 'query2')
                                from responseStream
                                select api_version
                                insert into responseSummaryStream ;

								@info(name = 'query3')
                                from requestSummaryStream#window.timeBatch(1 min)
                                select api_version,  count() as requestsPerMinPerApi
                                group by api_version
                                insert into requestPerMinPerApiStream ;

								@info(name = 'query4')
                                from responseSummaryStream#window.timeBatch(1 min)
                                select api_version,  count() as responsesPerMinPerApi
                                group by api_version
                                insert into responsePerMinPerApiStream ;

								/* Hourly queries */

                                /* events of the streams requestPerHourPerApiStream, responsePerHourPerApiStream are persisted. Spark script uses these persisted data to calculate percentiles*/

								/* timeBatch used because Minutely updates are needed */
                                @info(name = 'query5')
                                from requestSummaryStream#window.time(1 min)
                                select  api_version, apiPublisher,  count() as  requestsPerMinPerApi
                                group by api_version
                                insert into requestPerApiCountStream;

								@info(name = 'query6')
                                from responseSummaryStream#window.time(1 min)
                                select  api_version,   count() as  responsesPerMinPerApi
                                group by api_version
                                insert into responsePerApiCountStream;

								/* Creating requests stream with percentiles*/
                                @info(name = 'query7')
                                from requestPerApiCountStream join requestPerApiPercentileTable on (requestPerApiCountStream.api_version == requestPerApiPercentileTable.api_version)
								select requestPerApiCountStream.api_version as api_version, requestPerApiCountStream.apiPublisher as apiPublisher, requestsPerMinPerApi as requestsPerMin, requestsPerMinPerApiLowerPercentile as requestsPerMinLowerPercentile
                                insert into requestsPercentileStream;

								/* Creating responses stream with percentiles  */
                                @info(name = 'query8')
                                from responsePerApiCountStream join responsePerApiPercentileTable on (responsePerApiCountStream.api_version == responsePerApiPercentileTable.api_version)
								select responsePerApiCountStream.api_version as api_version, responsesPerMinPerApi as responsesPerMin, responsesPerMinPerApiLowerPercentile as responsesPerMinLowerPercentile
                                insert into responsesPercentileStream;

								/* Combine*/

								@info(name = 'query9')
								from requestsPercentileStream#window.time(1min) as requestsPercentileStreamWindow join responsesPercentileStream#window.time(1min) as responsesPercentileStreamWindow on (requestsPercentileStreamWindow.api_version == responsesPercentileStreamWindow.api_version)
								select requestsPercentileStreamWindow.api_version as api_version, requestsPercentileStreamWindow.apiPublisher as apiPublisher, requestsPercentileStreamWindow.requestsPerMin as requestsPerMin,requestsPercentileStreamWindow.requestsPerMinLowerPercentile as requestsPerMinLowerPercentile,
								responsesPercentileStreamWindow.responsesPerMin as responsesPerMin ,responsesPercentileStreamWindow.responsesPerMinLowerPercentile as responsesPerMinLowerPercentile
                                insert into requestResponseSummaryStream;

								@info(name = 'query10')
								from every requestResponseSummaryStream [requestsPerMin > requestsPerMinLowerPercentile AND responsesPerMin < responsesPerMinLowerPercentile] <2:>
								select api_version as api_version , apiPublisher, 'Response count is too low' as msg, (time:timestampInMilliseconds()) as alertTimestamp
								insert into apiHealthMonitorAlertStream;

								/* Now start response time queries */

								@info(name = 'query11')
								from responseStream
								select api_version, apiPublisher, responseTime
								insert into responseTimeSummaryStream;

								/*spark script calculates percentile of responseTime and stores in percentileTable */

								@info(name = 'query12')
								from responseTimeSummaryStream join responseTimePerApiPercentileTable
								on (responseTimeSummaryStream.api_version==responseTimePerApiPercentileTable.api_version)
								select responseTimeSummaryStream.api_version, responseTimeSummaryStream.apiPublisher, responseTimeSummaryStream.responseTime, responseTimePerApiPercentileTable.responseTimePerApiUpperPercentile
								insert into responseInfoStream;

								@info(name = 'query13')
								from every responseInfoStream [responseTime>responseTimePerApiUpperPercentile] <5:>
								select api_version, apiPublisher, 'Response time is too high' as msg, (time:timestampInMilliseconds()) as alertTimestamp
								insert into apiHealthMonitorAlertStream;

								@info(name = 'query14')
                                from responseStream
                                select api_version, apiPublisher,  responseCode
                                insert into responseCodeSummaryStream;

                                @info(name = 'query15')
                                from every responseCodeSummaryStream [responseCode > 499 AND responseCode < 600]  <5:>
                                select api_version, apiPublisher, 'Server error occurred' as msg, (time:timestampInMilliseconds()) as alertTimestamp
                                insert into apiHealthMonitorAlertStream;

                                @info(name='query16')
                                from apiHealthMonitorAlertStream
                                select 'healthAvailabilityPerMin' as type, msg as msg , (time:timestampInMilliseconds()) as alertTimestamp
                                insert into allApimAlertStream;